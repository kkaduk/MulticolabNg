pekko {
  loglevel = INFO
  
  actor {
    provider = cluster
    
    serialization-bindings {
      "net.kaduk.domain.Message" = jackson-json
    }
  }
  
  http {
    server {
      preview.enable-http2 = on
      default-http-port = 8080
      idle-timeout = infinite
    }
     client {
      idle-timeout = infinite
    }
  }
  
  remote.artery {
    canonical.hostname = "127.0.0.1"
    canonical.port = 2556
  }
  
  cluster {
    seed-nodes = ["pekko://AgentSystem@127.0.0.1:2556"]
    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
  }
}

agents {
  llm-providers {
    openai {
      api-key = ${?OPENAI_API_KEY}
      model = "gpt-4"
      max-tokens = 2000
      temperature = 0.7
    }
    claude {
      api-key = ${?ANTHROPIC_API_KEY}
      model = "claude-3-7-sonnet-latest"
    }
    vertex {
      project-id = ${?GCP_PROJECT_ID}
      api-key = ${?VERTEX_API_KEY}
      location = "us-central1"
      model = "gemini-1.5-flash-001"
    }
    ollama {
      base-url = "http://localhost:11434/v1/"
      model = "llama3"
      api-key = ""
    }
  }
  
  agents {
    idea-creator-agent {
      type = llm
      name = "Creator"
      provider = openai
      system-prompt = "You are Banking Product expert"
      capability = "creator"
      skills = ["create idea", "banking expertise","project ideation"]
    }
    idea-critic-agent {
      type = llm
      name = "Critic"
      provider = claude
      system-prompt = "You are a banking expert to analyze the banking product"
      capability = "critic"
      skills = ["analize", "find weak points", "research","legal analysis"]
    }

    idea-finalizer-agent {
      type = llm
      name = "Finalizer"
      provider = openai
      system-prompt = "You are Banking expert for finalize the proposed product idea"
      capability = "finalizer"
      skills = ["finalize idea", "propose final banking product", "project planning","synthesis"]
    }
    risk-estimator-agent {
      type = llm
      name = "RiskEstimator"
      provider = claude
      system-prompt = "You are a banking expert to analyze risk for the banking product"
      capability = "risk"
      skills = ["risk assessment","regulatory compliance"]
    }

    llm-main {
      name = "MainEntryPoint"
      provider = claude
      system-prompt = "You are coordination specialist to resolve question by agents teams"
      capability = "coordinator"
      skills = ["planning", "routing", "aggregation"]
      type = llm-main
      planning-enabled = true
      max-parallelism = 3
      execution-strategy = "adaptive" # sequential | parallel | adaptive
      ask-timeout = 30s
    
      prompt-templates {
        planning = "templates/planning.txt"
        step-execution = "templates/step.txt"
        aggregation = "templates/aggregate.txt"
      }
    }
  }
}
